{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Rocketseat\\\\AulasNLW\\\\podcastrnext\\\\src\\\\contexts\\\\PlayContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\ntype;\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      isPlaying: isPlaying,\n      togglePlay: togglePlay,\n      setPlayingState: setPlayingState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 7\n  }, this);\n}\n\n_s(PlayerContextProvider, \"IxwYVSEvRPqgMJsfoXPeylduKl8=\");\n\n_c = PlayerContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["D:/Rocketseat/AulasNLW/podcastrnext/src/contexts/PlayContext.tsx"],"names":["createContext","useState","type","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","play","episode","togglePlay","setPlayingState","state"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AAmBAC,IAAI;AAEJ,OAAO,IAAMC,aAAa,gBAAGH,aAAa,CAAC,EAAD,CAAnC;AAGP,OAAO,SAASI,qBAAT,OAA6C;AAAA;;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AAAA,kBACVJ,QAAQ,CAAC,EAAD,CADE;AAAA,MACzCK,WADyC;AAAA,MAC5BC,cAD4B;;AAAA,mBAEIN,QAAQ,CAAC,CAAD,CAFZ;AAAA,MAE3CO,mBAF2C;AAAA,MAEtBC,sBAFsB;;AAAA,mBAGdR,QAAQ,CAAC,KAAD,CAHM;AAAA,MAG1CS,SAH0C;AAAA,MAG/BC,YAH+B;;AAKlD,WAASC,IAAT,CAAcC,OAAd,EAAuB;AACrBN,IAAAA,cAAc,CAAC,CAACM,OAAD,CAAD,CAAd;AACAJ,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,WAASG,UAAT,GAAsB;AACpBH,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASK,eAAT,CAAyBC,KAAzB,EAAyC;AACvCL,IAAAA,YAAY,CAACK,KAAD,CAAZ;AACD;;AAED,sBACI,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEV,MAAAA,WAAW,EAAXA,WAAF;AAAeE,MAAAA,mBAAmB,EAAnBA,mBAAf;AAAoCI,MAAAA,IAAI,EAAJA,IAApC;AAA0CF,MAAAA,SAAS,EAATA,SAA1C;AAAqDI,MAAAA,UAAU,EAAVA,UAArD;AAAiEC,MAAAA,eAAe,EAAfA;AAAjE,KAA/B;AAAA,cACKV;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAIE;;GAvBYD,qB;;KAAAA,qB","sourcesContent":["import { createContext, useState } from 'react';\r\n\r\ntype Episode = {\r\n    title: string;\r\n    members: string;\r\n    thumbnail: string;\r\n    duration: number;\r\n    url: string;\r\n};\r\n\r\ntype PlayerContextData = {\r\n    episodeList: Episode[];\r\n    currentEpisodeIndex: number;\r\n    isPlaying: boolean;\r\n    play: (episodes: Episode) => void;\r\n    setPlayingState: (state: boolean) => void;\r\n    togglePlay: () => void;\r\n};\r\n\r\ntype \r\n\r\nexport const PlayerContext = createContext({} as PlayerContextData);\r\n\r\n\r\nexport function PlayerContextProvider({ children }) {\r\n    const [episodeList, setEpisodeList] = useState([]);\r\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\r\n  const [ isPlaying, setIsPlaying ] = useState(false);\r\n\r\n  function play(episode) {\r\n    setEpisodeList([episode]);\r\n    setCurrentEpisodeIndex(0);\r\n    setIsPlaying(true);\r\n  }\r\n\r\n  function togglePlay() {\r\n    setIsPlaying(!isPlaying);\r\n  }\r\n\r\n  function setPlayingState(state: boolean) {\r\n    setIsPlaying(state);\r\n  }\r\n\r\n  return (\r\n      <PlayerContext.Provider value={{ episodeList, currentEpisodeIndex, play, isPlaying, togglePlay, setPlayingState }}>\r\n          {children}\r\n    </PlayerContext.Provider>\r\n  )}"]},"metadata":{},"sourceType":"module"}