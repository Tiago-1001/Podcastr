{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Desenvonvimento Web\\\\Rocketseat\\\\AulasNLW\\\\podcastrnext\\\\src\\\\contexts\\\\PlayContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  var _useState4 = useState(false),\n      isLooping = _useState4[0],\n      setIsLooping = _useState4[1];\n\n  var _useState5 = useState(false),\n      isShuffling = _useState5[0],\n      setIsShuffling = _useState5[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(List, index) {\n    setEpisodeList(List);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  var hasPrevious = currentEpisodeIndex > 0;\n  var hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (isShuffling) {\n      var nextRandomEpisodeIndex = Mat;\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      playPrevious: playPrevious,\n      play: play,\n      playList: playList,\n      playNext: playNext,\n      isPlaying: isPlaying,\n      isLooping: isLooping,\n      isShuffling: isShuffling,\n      togglePlay: togglePlay,\n      setPlayingState: setPlayingState,\n      hasNext: hasNext,\n      hasPrevious: hasPrevious,\n      toggleLoop: toggleLoop,\n      toggleShuffle: toggleShuffle\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlayerContextProvider, \"YSXWY8OfLfVxd5To+FHcHi+GAY0=\");\n\n_c = PlayerContextProvider;\nexport var usePlayer = function usePlayer() {\n  _s2();\n\n  return useContext(PlayerContext);\n};\n\n_s2(usePlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["D:/Desenvonvimento Web/Rocketseat/AulasNLW/podcastrnext/src/contexts/PlayContext.tsx"],"names":["createContext","useContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","play","episode","playList","List","index","togglePlay","toggleLoop","toggleShuffle","setPlayingState","state","hasPrevious","hasNext","length","playNext","nextRandomEpisodeIndex","Mat","playPrevious","usePlayer"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react';\r\n\r\ntype Episode = {\r\n    title: string;\r\n    members: string;\r\n    thumbnail: string;\r\n    duration: number;\r\n    url: string;\r\n};\r\n\r\ntype PlayerContextData = {\r\n    episodeList: Episode[];\r\n    currentEpisodeIndex: number;\r\n    isPlaying: boolean;\r\n    isLooping: boolean;\r\n    hasPrevious: boolean;\r\n    hasNext: boolean;\r\n    isShuffling: boolean;\r\n    play: (episodes: Episode) => void;\r\n    playList: (List: Episode[], index: number) => void;\r\n    setPlayingState: (state: boolean) => void;\r\n    togglePlay: () => void;\r\n    toggleLoop: () => void;\r\n    toggleShuffle: () => void;\r\n    playPrevious: () => void;\r\n    playNext: () => void;\r\n};\r\n\r\ntype PlayerContextProviderProps = {\r\n    children: ReactNode;\r\n}\r\n\r\nexport const PlayerContext = createContext({} as PlayerContextData);\r\n\r\n\r\nexport function PlayerContextProvider({ children }: PlayerContextProviderProps){\r\n    const [episodeList, setEpisodeList] = useState([]);\r\n    const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [isLooping, setIsLooping] = useState(false);\r\n    const [isShuffling, setIsShuffling] = useState(false);\r\n\r\n\r\n    function play(episode) {\r\n        setEpisodeList([episode]);\r\n        setCurrentEpisodeIndex(0);\r\n        setIsPlaying(true);\r\n    }\r\n\r\n    function playList(List: Episode[], index: number) {\r\n        setEpisodeList(List);\r\n        setCurrentEpisodeIndex(index);\r\n        setIsPlaying(true);\r\n    }\r\n\r\n    function togglePlay() {\r\n        setIsPlaying(!isPlaying);\r\n    }\r\n\r\n    function toggleLoop() {\r\n        setIsLooping(!isLooping);\r\n    }\r\n\r\n    function toggleShuffle() {\r\n        setIsShuffling(!isShuffling);\r\n    }\r\n\r\n    function setPlayingState(state: boolean) {\r\n        setIsPlaying(state);\r\n    }\r\n\r\n    const hasPrevious = currentEpisodeIndex > 0;\r\n    const hasNext = (currentEpisodeIndex + 1) < episodeList.length;\r\n\r\n    function playNext() {\r\n        if (isShuffling) {\r\n            const nextRandomEpisodeIndex = Mat\r\n        } else if (hasNext) {\r\n            setCurrentEpisodeIndex(currentEpisodeIndex + 1);\r\n        }\r\n    }\r\n\r\n    function playPrevious() {\r\n        if (hasPrevious) {\r\n        setCurrentEpisodeIndex(currentEpisodeIndex - 1);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <PlayerContext.Provider value={{\r\n            episodeList,\r\n            currentEpisodeIndex,\r\n            playPrevious,\r\n            play,\r\n            playList,\r\n            playNext,\r\n            isPlaying,\r\n            isLooping,\r\n            isShuffling,\r\n            togglePlay,\r\n            setPlayingState,\r\n            hasNext,\r\n            hasPrevious,\r\n            toggleLoop,\r\n            toggleShuffle\r\n        }}>\r\n            {children}\r\n        </PlayerContext.Provider>\r\n    )\r\n}\r\n\r\nexport const usePlayer = () => {\r\n    return useContext(PlayerContext);\r\n}"]},"metadata":{},"sourceType":"module"}