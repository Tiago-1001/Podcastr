{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Desenvonvimento Web\\\\Rocketseat\\\\AulasNLW\\\\podcastrnext\\\\src\\\\contexts\\\\PlayContext.tsx\";\nimport { createContext, useContext, useState } from 'react';\nexport const PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider({\n  children\n}) {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeIndex\n  } = useState(0);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n  const {\n    0: isLooping,\n    1: setIsLooping\n  } = useState();\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(List, index) {\n    setEpisodeList(List);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList,\n      currentEpisodeIndex,\n      playPrevious,\n      play,\n      playList,\n      playNext,\n      isPlaying,\n      togglePlay,\n      setPlayingState,\n      hasNext,\n      hasPrevious\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n};","map":{"version":3,"sources":["D:/Desenvonvimento Web/Rocketseat/AulasNLW/podcastrnext/src/contexts/PlayContext.tsx"],"names":["createContext","useContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","play","episode","playList","List","index","togglePlay","setPlayingState","state","hasPrevious","hasNext","length","playNext","playPrevious","usePlayer"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,QAA/C,QAA+D,OAA/D;AA4BA,OAAO,MAAMC,aAAa,gBAAGH,aAAa,CAAC,EAAD,CAAnC;AAGP,OAAO,SAASI,qBAAT,CAA+B;AAAEC,EAAAA;AAAF,CAA/B,EAAwE;AAC3E,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCL,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAACM,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDP,QAAQ,CAAC,CAAD,CAA9D;AACA,QAAM;AAAA,OAACQ,SAAD;AAAA,OAAYC;AAAZ,MAA4BT,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACU,SAAD;AAAA,OAAYC;AAAZ,MAA4BX,QAAQ,EAA1C;;AAEA,WAASY,IAAT,CAAcC,OAAd,EAAuB;AACnBR,IAAAA,cAAc,CAAC,CAACQ,OAAD,CAAD,CAAd;AACAN,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;;AAED,WAASK,QAAT,CAAkBC,IAAlB,EAAmCC,KAAnC,EAAkD;AAC9CX,IAAAA,cAAc,CAACU,IAAD,CAAd;AACAR,IAAAA,sBAAsB,CAACS,KAAD,CAAtB;AACAP,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;;AAED,WAASQ,UAAT,GAAsB;AAClBR,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACH;;AAED,WAASU,eAAT,CAAyBC,KAAzB,EAAyC;AACrCV,IAAAA,YAAY,CAACU,KAAD,CAAZ;AACH;;AAED,QAAMC,WAAW,GAAGd,mBAAmB,GAAG,CAA1C;AACA,QAAMe,OAAO,GAAIf,mBAAmB,GAAG,CAAvB,GAA4BF,WAAW,CAACkB,MAAxD;;AAEA,WAASC,QAAT,GAAoB;AAChB,QAAIF,OAAJ,EAAa;AACbd,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACC;AACJ;;AAED,WAASkB,YAAT,GAAwB;AACpB,QAAIJ,WAAJ,EAAiB;AACjBb,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACC;AACJ;;AAED,sBACI,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAC3BF,MAAAA,WAD2B;AAE3BE,MAAAA,mBAF2B;AAG3BkB,MAAAA,YAH2B;AAI3BZ,MAAAA,IAJ2B;AAK3BE,MAAAA,QAL2B;AAM3BS,MAAAA,QAN2B;AAO3Bf,MAAAA,SAP2B;AAQ3BS,MAAAA,UAR2B;AAS3BC,MAAAA,eAT2B;AAU3BG,MAAAA,OAV2B;AAW3BD,MAAAA;AAX2B,KAA/B;AAAA,cAaKjB;AAbL;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH;AAED,OAAO,MAAMsB,SAAS,GAAG,MAAM;AAC3B,SAAO1B,UAAU,CAACE,aAAD,CAAjB;AACH,CAFM","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react';\r\n\r\ntype Episode = {\r\n    title: string;\r\n    members: string;\r\n    thumbnail: string;\r\n    duration: number;\r\n    url: string;\r\n};\r\n\r\ntype PlayerContextData = {\r\n    episodeList: Episode[];\r\n    currentEpisodeIndex: number;\r\n    isPlaying: boolean;\r\n    hasPrevious: boolean;\r\n    hasNext: boolean;\r\n    play: (episodes: Episode) => void;\r\n    playList: (List: Episode[], index: number) => void;\r\n    setPlayingState: (state: boolean) => void;\r\n    togglePlay: () => void;\r\n    playPrevious: () => void;\r\n    playNext: () => void;\r\n};\r\n\r\ntype PlayerContextProviderProps = {\r\n    children: ReactNode;\r\n}\r\n\r\nexport const PlayerContext = createContext({} as PlayerContextData);\r\n\r\n\r\nexport function PlayerContextProvider({ children }: PlayerContextProviderProps){\r\n    const [episodeList, setEpisodeList] = useState([]);\r\n    const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [isLooping, setIsLooping] = useState();\r\n\r\n    function play(episode) {\r\n        setEpisodeList([episode]);\r\n        setCurrentEpisodeIndex(0);\r\n        setIsPlaying(true);\r\n    }\r\n\r\n    function playList(List: Episode[], index: number) {\r\n        setEpisodeList(List);\r\n        setCurrentEpisodeIndex(index);\r\n        setIsPlaying(true);\r\n    }\r\n\r\n    function togglePlay() {\r\n        setIsPlaying(!isPlaying);\r\n    }\r\n\r\n    function setPlayingState(state: boolean) {\r\n        setIsPlaying(state);\r\n    }\r\n\r\n    const hasPrevious = currentEpisodeIndex > 0;\r\n    const hasNext = (currentEpisodeIndex + 1) < episodeList.length;\r\n\r\n    function playNext() {\r\n        if (hasNext) {\r\n        setCurrentEpisodeIndex(currentEpisodeIndex + 1);\r\n        }\r\n    }\r\n\r\n    function playPrevious() {\r\n        if (hasPrevious) {\r\n        setCurrentEpisodeIndex(currentEpisodeIndex - 1);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <PlayerContext.Provider value={{\r\n            episodeList,\r\n            currentEpisodeIndex,\r\n            playPrevious,\r\n            play,\r\n            playList,\r\n            playNext,\r\n            isPlaying,\r\n            togglePlay,\r\n            setPlayingState,\r\n            hasNext,\r\n            hasPrevious,\r\n        }}>\r\n            {children}\r\n        </PlayerContext.Provider>\r\n    )\r\n}\r\n\r\nexport const usePlayer = () => {\r\n    return useContext(PlayerContext);\r\n}"]},"metadata":{},"sourceType":"module"}